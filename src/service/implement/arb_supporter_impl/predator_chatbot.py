import json

from src.utils.utils import load_json, to_json
from src.model.alpha_metadata import AlphaMetadata, Params
from src.service.interface.arb_supporter.multi_agent import MultiAgent
from src.service.interface.arb_supporter.confirmation_agent import ConfirmationAgent
from src.service.interface.arb_supporter.ner_agent import NerAgent
from src.service.interface.arb_supporter.function_calling_agent import FunctionCallingAgent
from src.service.interface.arb_supporter.normal_conversation_agent import NormalConversationAgent
from src.service.interface.arb_supporter.nosql_dabase import NoSQLDatabase


class PredatorChatbot(MultiAgent):
    """
    Implementation of MultiAgent for the Predator chatbot system.
    This class manages multiple AI agents and their interactions for the Predator chatbot.
    """

    def __init__(
        self,
        casual_conversation_agent: NormalConversationAgent,
        confirmation_agent: ConfirmationAgent,
        ner_agent: NerAgent,
        function_calling_agent: FunctionCallingAgent,
        database: NoSQLDatabase
    ) -> None:
        """
        Initialize the PredatorChatbot with required agents and configuration.

        Args:
            llm: Language model interface
            confirmation_agent: Agent for confirming user intents
            task_detection_agent: Agent for detecting tasks from user queries
            ner_agent: Agent for named entity recognition
            ner_verification_agent: Agent for verifying extracted entities
            history_context_folder: Path to store conversation history
            predator_chatbot_config: Configuration for the predator chatbot
        """
        # Initialize the agents
        self.casual_conversation_agent = casual_conversation_agent
        self.confirmation_agent = confirmation_agent
        self.ner_agent = ner_agent
        self.database = database
        self.function_calling_agent = function_calling_agent
        self.metadata_chain = []
        


    def chat(self, user_id: str, message: str) -> AlphaMetadata:
        """
        Process a message through the multi-agent system.

        Args:
            user_id: The user ID to process
            message: The input message to process

        Returns:
            str: The response generated by the agent system
        """
        
        # Initialize the flags
        is_new_session = False
        is_action = False
        
        # Extract entities from the message
        entities = self.ner_agent.extract_entities(message)
        
        # Get confirmation for the detected tasks and entities
        is_confirmed = self.confirmation_agent.get_decision(message)
        
        # Get the function calling
        function_called = self.function_calling_agent.call_function(message)
        
        # Generate response based on tasks, entities and confirmation
        response = self.casual_conversation_agent.chat(message, entities)
        
        # Case 1: is_action
        if is_confirmed and function_called != 'N/A':
            is_action = True
            
        # Case 2: is_new_session
        latest_function = self.database.get(user_id)[-1]['endpoint']
        if latest_function != function_called:
            is_new_session = True
            self.metadata_chain = []
        
        # Create params
        params = Params(
            from_date=entities['from_date'],
            to_date=entities['to_date'],
            product=entities['product'],
            product_detail=entities['product_detail'],
            level=entities['level'],
            user=entities['user']
        )
        
        # Update the metadata
        alpha_metadata = AlphaMetadata(
            user_id=user_id,
            is_new_session=is_new_session,
            is_action=is_action,
            endpoint=function_called,
            params=params,
            response=response
        )
        
        # Insert the metadata into the database
        self.metadata_chain.append(json.dumps(alpha_metadata.__dict__, default=str))
        self.database.insert(
            user_id=user_id,
            metadata=self.metadata_chain
        )
        
        return alpha_metadata
